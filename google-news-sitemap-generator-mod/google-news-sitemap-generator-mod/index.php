<?php
/*
Plugin Name:  NME Google News Sitemap Generator
Plugin URI:   http://pleer.co.uk/wordpress/plugins/google-news-xml-sitemap-generator/
Description:  Based on the plugin by Chris Jinks, this plugin generates a valid Google News Sitemap in XML format with images in it.
Version:      1.0
Author:       Chris Jinks, JL Marzio (NME)
Author URI:   http://www.netmediaeurope.com/

Copyright (C) 2013-2013, JL Marzio
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
Neither the name of Alex Moss or pleer nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

if(is_admin()){
	$dir = plugin_dir_path( __FILE__ );
	include $dir.'/admin.php';
}


function nme_google_news_sitemap_get_category_keywords($newsID)
{
	global $wpdb;

	//Check for new >2.3 Wordpress taxonomy
	if (function_exists("get_taxonomy") && function_exists("get_terms"))
		{
			//Get categoy names
			$categories = $wpdb->get_results("
					SELECT $wpdb->terms.name FROM $wpdb->term_relationships,  $wpdb->term_taxonomy,  $wpdb->terms
					WHERE $wpdb->term_relationships.term_taxonomy_id = $wpdb->term_taxonomy.term_taxonomy_id
					AND $wpdb->term_taxonomy.term_id =  $wpdb->terms.term_id
					AND $wpdb->term_relationships.object_id = $newsID
					AND $wpdb->term_taxonomy.taxonomy = 'category'");
				$i = 0;
				$categoryKeywords = "";
				foreach ($categories as $category)
				{
					if ($i>0){$categoryKeywords.= ", ";} //Comma seperator
					$categoryKeywords.= $category->name; //ammed string
					$i++;
				}

			//Get tags
			$tags = $wpdb->get_results("
					SELECT $wpdb->terms.name FROM $wpdb->term_relationships,  $wpdb->term_taxonomy,  $wpdb->terms
					WHERE $wpdb->term_relationships.term_taxonomy_id = $wpdb->term_taxonomy.term_taxonomy_id
					AND $wpdb->term_taxonomy.term_id =  $wpdb->terms.term_id
					AND $wpdb->term_relationships.object_id = $newsID
					AND $wpdb->term_taxonomy.taxonomy = 'post_tag'");
				$i = 0;
				$tagKeywords = "";
				foreach ($tags as $tag)
				{
					if ($i>0){$tagKeywords.= ", ";} //Comma seperator
					$tagKeywords.= $tag->name; //ammed string
					$i++;
				}


		}

	//Old Wordpress database <2.3
	else
		{
			$categories = $wpdb->get_results("SELECT category_id FROM $wpdb->post2cat WHERE post_id=$newsID");
			$i = 0;
			$categoryKeywords = "";
			foreach ($categories as $category)
			{
				if ($i>0){$categoryKeywords.= ", ";} //Comma seperator
				$categoryKeywords.= get_catname($category->category_id); //ammed string
				$i++;
			}
		}

	if (get_option('googlenewssitemap_tagkeywords') == 'on')
	{
		if($tagKeywords!=NULL)
		{
			$categoryKeywords = $categoryKeywords.', '.$tagKeywords; //IF tags are included
		}
	}

	 return $categoryKeywords; //Return post category names as keywords
}

function nme_google_news_sitemap_write_google_news_sitemap()
{

	global $wpdb;
	// Fetch options from database
	$permalink_structure = $wpdb->get_var("SELECT option_value FROM $wpdb->options
					WHERE option_name='permalink_structure'");
	$siteurl = $wpdb->get_var("SELECT option_value FROM $wpdb->options
				WHERE option_name='siteurl'");

	// Output XML header


	// Begin urlset
	$xmlOutput.= "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:news=\"http://www.google.com/schemas/sitemap-news/0.9\" xmlns:image=\"http://www.google.com/schemas/sitemap-image/1.1\">\n";


	//Credit
	$xmlOutput.= "<!-- Generated by Google News Sitemap Generator Wordpress Plugin -->\n";
	$xmlOutput.= "<!-- Created by Chris Jinks | http://www.southcoastwebsites.co.uk, tweaked by NME | -->\n";
	$xmlOutput.= "<!-- http://wordpress.org/extend/plugins/google-news-sitemap-generator/ -->\n";

	//Show either Posts or Pages or Both
	if (get_option('googlenewssitemap_includePages') == 'on' && get_option('googlenewssitemap_includePosts') == 'on')
		$includeMe = 'AND (post_type="page" OR post_type = "post")';

	elseif (get_option('googlenewssitemap_includePages') == 'on')
		$includeMe = 'AND post_type="page"';

	elseif (get_option('googlenewssitemap_includePosts') == 'on')
		$includeMe = 'AND post_type="post"';


	//Exclude categories
	if (get_option('googlenewssitemap_excludeCat')<>NULL)
	{
		$exPosts = get_objects_in_term(get_option('googlenewssitemap_excludeCat'),"category");
		$includeMe.= ' AND ID NOT IN ('.implode(",",$exPosts).')';
	}

	//Limit to last 2 days, 50,000 items
	$rows = $wpdb->get_results("SELECT ID, post_date_gmt, post_title
						FROM $wpdb->posts
						WHERE post_status='publish'
						AND (DATEDIFF(CURDATE(), post_date_gmt)<=2)
						$includeMe
						ORDER BY post_date_gmt DESC
						LIMIT 0, 50000");


	// Output sitemap data
	foreach($rows as $row){
		$xmlOutput.= "\t<url>\n";
		$xmlOutput.= "\t\t<loc>";
		$xmlOutput.= get_permalink($row->ID);
		$xmlOutput.= "</loc>\n";
		$xmlOutput.= "\t\t<news:news>\n";

		$xmlOutput.= "\t\t\t<news:publication>\n";
		$xmlOutput.= "\t\t\t\t<news:name>";
		$xmlOutput.= htmlspecialchars(get_option('blogname'));
		$xmlOutput.= "</news:name>\n";
		$xmlOutput.= "\t\t\t\t<news:language>";
		$xmlOutput.= get_option('rss_language');
		$xmlOutput.= "</news:language>\n";
		$xmlOutput.= "\t\t\t</news:publication>\n";
		$xmlOutput.= "\t\t\t<news:publication_date>";
		$thedate = substr($row->post_date_gmt, 0, 10);
		$xmlOutput.= $thedate;
		$xmlOutput.= "</news:publication_date>\n";
		$xmlOutput.= "\t\t\t<news:title>";
		$xmlOutput.= htmlspecialchars($row->post_title);
		$xmlOutput.= "</news:title>\n";
		$xmlOutput.= "\t\t\t<news:keywords>";

		//Use the categories for keywords
		$xmlOutput.= get_category_keywords($row->ID);

		$xmlOutput.= "</news:keywords>\n";
		$xmlOutput.= "\t\t</news:news>\n";
		$xmlOutput.= "\t\t<image:image>\n";
		$xmlOutput.= "\t\t\t<image:loc>";
		$img_newsmap = wp_get_attachment_image_src(get_post_thumbnail_id($row->ID));
		$xmlOutput.= $img_newsmap[0];
		$xmlOutput.= "</image:loc>\n";
		$xmlOutput.= "\t\t</image:image>\n";
		$xmlOutput.= "\t</url>\n";
	}

	// End urlset
	$xmlOutput.= "</urlset>\n";
	$xmlOutput.= "<!-- Last build time: ".date("F j, Y, g:i a")."-->";

	$xmlFile = "../google-news-sitemap.xml";
	$fp = fopen($xmlFile, "w+"); // open the cache file "google-news-sitemap.xml" for writing
	fwrite($fp, $xmlOutput); // save the contents of output buffer to the file
	fclose($fp); // close the file
}

?>